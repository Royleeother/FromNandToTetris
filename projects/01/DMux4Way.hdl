// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/01/DMux4Way.hdl

/**
 * 4-way demultiplexor:
 * {a, b, c, d} = {in, 0, 0, 0} if sel == 00
 *                {0, in, 0, 0} if sel == 01
 *                {0, 0, in, 0} if sel == 10
 *                {0, 0, 0, in} if sel == 11
 */

CHIP DMux4Way {
    IN in, sel[2];
    OUT a, b, c, d;

    PARTS:
    // Put your code here:
    
    // zz     z stands for zero, o stands for one
    Or(a=sel[0], b=sel[1], out=zzTemp);
    Not(in=zzTemp, out=zz);
    // zo
    Not(in=sel[1], out=notzero);
    And(a=sel[0], b=notzero, out=zo);
    // oz
    Not(in=sel[0], out=notzero1);
    And(a=sel[1], b=notzero1, out=oz);
    // oo
    And(a=sel[1], b=sel[0], out=oo);
    
    Or(a=zz, b=zo, out=zzORzo); // digits: (0,0) or (0,1)
    Or(a=oz, b=oo, out=ozORoo); // digits: (1,0) or (1,1)
    // as it says
    Not(in=sel[0], out=assumeFalse);
    And(a=sel[0], b=true, out=assumeTrue);
    // judgement
    And(a=zzORzo, b=assumeTrue, out=inAtb);
    And(a=zzORzo, b=assumeFalse, out=inAta);
    And(a=ozORoo, b=assumeTrue, out=inAtd);
    And(a=ozORoo, b=assumeFalse, out=inAtc);
    // output
    Mux(a=false, b=in, sel=inAtb, out=b);
    Mux(a=false, b=in, sel=inAta, out=a);
    Mux(a=false, b=in, sel=inAtd, out=d);
    Mux(a=false, b=in, sel=inAtc, out=c);

    /*
    DMux(in=in, sel=sel[1], a=dmux0, b=dmux1);

    DMux(in=dmux0, sel=sel[0], a=a, b=b);
    DMux(in=dmux1, sel=sel[0], a=c, b=d);
    */
    
}