// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    // Start instruction handling 
    // Instruction decoding
    Mux16(a=instruction, b=ALUtoA, sel= instruction[15], out= decode);

    // if is A-ins, load = true, else, depends on dest.
    Mux(a=true, b=instruction[5], sel=instruction[15], out=LoadARes); 
    ARegister(in=decode, load=LoadARes, out=AResOP, out[0..14]=addressM);  // A Resgister
   
    // Instruction execution
    And (a=instruction[3], b=instruction[15], out=writeM);

    And (a=instruction[4], b=instruction[15], out=storeInD);
    DRegister(in=ALUtoD, load=storeInD, out=DOut);  // D Resgister

    // input to the ALU either input from memory or from registerA
    Mux16(a=AResOP, b=inM, sel=instruction[12], out=AResOrDataM); // 原来是这里搞错了，a,b input要分清
    
    ALU(x=DOut, y=AResOrDataM, zx=instruction[11], nx=instruction[10], 
    zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], 
    out=ALUtoA, out=ALUtoD, out= outM, zr=zr, ng=ng);
    

    // Next insturction fetching
    // Compute the 8 bools for different jump options
    // No jump
    Not (in=true, out=nojmp);
    // Jump
    Not (in=false, out=jmp);
    // is Zero
    And (a=true, b=zr, out=jeq);
    // is Neg
    And (a=true, b=ng, out=jlt);
    // is not Zero
    Not (in=zr, out=jne);
    // is Pos
    Not (in=jle, out=jgt);
    // is Zero or Pos
    Or (a=zr, b=jgt, out=jge);
    // is Zero or Neg
    Or (a=zr, b=ng, out=jle);
    // Compute whether we need to jump in the next instruction
    Mux8Way (a=nojmp, b=jgt, c=jeq, d=jge, e=jlt, f=jne, g=jle, h=jmp, sel=instruction[0..2], out=maybeJump);
    And (a= instruction[15], b=maybeJump, out=shouldJump);

    PC(in=AResOP, load=shouldJump, inc=true, reset=reset, out[0..14]=pc);
}